---
import AdminLayout from "../../layouts/admin-layout.astro";
import FormComponent from "../form-component.astro";
import { apiConfig } from "../../../../db/routes";
const { form, id } = Astro.params;
import { getFieldDefinitions } from "../../../../services/fields";

const tableConfigRecord = apiConfig.find((t) => t.route === form);
// const tableConfig = getFieldDefinitions(tableConfigRecord);

//get existing record
const getRecord = async (id) => {
  const baseURl = Astro.request.url.split("/admin/")[0];
  const getUrl = `${baseURl}/api/v1/${tableConfigRecord.route}/?id=${id}`;

  const session = Astro.cookies.get("session")?.value;
  const response = await fetch(getUrl, {
    headers: new Headers({ Authorization: `Bearer ${session}` }),
  });
  if (response.ok) {
    const responseData: { data: any } = await response.json();
    return responseData;
  }
};

const record = await getRecord(id);

if (Astro.request.method === "POST") {
  try {
    const formData = await Astro.request.formData();
    var data = {};
    formData.forEach((value, key) => {
      // Reflect.has in favor of: object.hasOwnProperty(key)
      if (!Reflect.has(data, key)) {
        data[key] = value;
        return;
      }
      if (!Array.isArray(data[key])) {
        data[key] = [data[key]];
      }
      data[key].push(value);
    });
    var json = JSON.stringify({ data });

    //now post to our own post api
    const baseURl = Astro.request.url.split("/admin/")[0];
    const postUrl = `${baseURl}/api/v1/${tableConfigRecord.route}/${id}`;
    try {
      const session = Astro.cookies.get("session")?.value;
      const response = await fetch(postUrl, {
        method: "PUT",
        body: json,
        headers: new Headers({ Authorization: `Bearer ${session}` }),
      });

      if (!response.ok) {
        throw new Error("Network response was not ok");
      }

      const result = await response.json();
      // console.log("Success:", result);
    } catch (error) {
      console.error("Error:", error);
    }

    // Do something with the data
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  } finally {
    return Astro.redirect(`/admin/tables/${tableConfigRecord.route}`);
  }
}
---

<AdminLayout title=`SonicJs Admin` | {form} `>
  <FormComponent record={record.data} />
</AdminLayout>
