#!/usr/bin/env node

import { execSync } from 'node:child_process';
import { writeFile, readFile, rm } from 'node:fs/promises';
import { createInterface } from 'node:readline/promises';
import { stdin as input, stdout as output } from 'node:process';
import { join } from 'node:path';

const currentDir = process.cwd();
const errorColor = '\x1b[31m';
const infoColor = '\x1b[34m';
const interactiveColor = '\x1b[33m';
const resetColor = '\x1b[0m';

const projectName = process.argv[2] ?? 'sonicjs';
let cloudflareAccountId = process.argv[3];
let cloudflareKvNamespaceId = process.argv[4];
let cloudflareKvNamespacePreviewId = process.argv[5];
let cloudflareDatabaseId = process.argv[6];

const projectPath = join(currentDir, projectName);

const settings = {
    ACCOUNT_ID: {
        label: 'cloudflare account id',
        howToGenerate: `It can be found at ${infoColor}https://dash.cloudflare.com/ --> Workers & Pages${resetColor}`
    },
    KV_NAMESPACE_ID: {
        label: 'cloudflare kv namespace id',
        howToGenerate: `It can be generated by ${infoColor}wrangler kv:namespace create SonicJS${resetColor} and copying the id below.`
    },
    KV_NAMESPACE_PREVIEW_ID: {
        label: 'cloudflare kv namespace preview id',
        howToGenerate: `It can be generated by ${infoColor}wrangler kv:namespace create SonicJS --preview${resetColor} and copying the id below.`
    },
    DATABASE_ID: {
        label: 'cloudflare database id',
        howToGenerate: `It can be generated by ${infoColor}wrangler d1 create SonicJS${resetColor} and copying the id below.`
    }
};

const checkoutCmd = `git clone https://github.com/lane711/SonicJS ${projectName}`;

const getParameter = async (setting) => {
    const readSetting = createInterface({ input, output, terminal: false });
    console.log(`Please enter your ${setting.label}.${setting.howToGenerate ? ` ${setting.howToGenerate}` : ''}`);
    const settingValue = await readSetting.question(`${interactiveColor}${setting.label}: ${resetColor}`);
    return settingValue;
}

const getConfigFile = async () => {
    const configFileTemplate = (await readFile(join(projectPath, 'wrangler.example.toml'))).toString();
    const configFile = configFileTemplate
        .replace('${ACCOUNT_ID}', cloudflareAccountId)
        .replace('${KV_NAMESPACE_ID}', cloudflareKvNamespaceId)
        .replace('${KV_NAMESPACE_PREVIEW_ID}', cloudflareKvNamespacePreviewId)
        .replace('${DATABASE_ID}', cloudflareDatabaseId);
    return configFile;
}

const main = async () => {
    console.log('cloning SonicJS...');
    execSync(checkoutCmd);
    console.log(`${infoColor}SonicJS successfully cloned!${resetColor}`);
    console.log('executing npm install...');
    process.chdir(projectPath);
    execSync('npm install')
    console.log(`${infoColor}npm install successfully completed!${resetColor}`);
    cloudflareAccountId = cloudflareAccountId ?? await getParameter(settings.ACCOUNT_ID);
    cloudflareKvNamespaceId = cloudflareKvNamespaceId ?? await getParameter(settings.KV_NAMESPACE_ID);
    cloudflareKvNamespacePreviewId = cloudflareKvNamespacePreviewId ?? await getParameter(settings.KV_NAMESPACE_PREVIEW_ID);
    cloudflareDatabaseId = cloudflareDatabaseId ?? await getParameter(settings.DATABASE_ID);
    console.log(`parameters complete. start writing config...`);
    process.stdin.unref();
    let configFile;
    try {
        configFile = await getConfigFile();
    } catch(err) {
        console.error(`${errorColor}could not read config file! aborting!${resetColor}`, err);
        process.exit(1);
    }
    try{
        await writeFile(join(projectPath, `wrangler.toml`), configFile);
    } catch(err) {
        console.error(`${errorColor}could not write config file! This might be a permissions issue. aborting!${resetColor}`, err);
        process.exit(1);
    }
    try{
        const delSampleConfig = rm(join(projectPath, 'wrangler.example.toml'));
        const delScripts = rm(join(projectPath, '.scripts'), {recursive: true});
        const delGit = rm(join(projectPath, '.git'), {recursive: true});
        Promise.allSettled([delSampleConfig, delScripts, delGit]);
    } catch(err) {
        console.warn('Could not cleanup properly! Please manually delete the wrangler example file and the .scripts directory');
    }
    console.log(`SonicJS is setup successfully ðŸš€ To get started: ${infoColor}cd ${projectName}${resetColor} && ${infoColor}npm run dev${resetColor}`);
};

main();
